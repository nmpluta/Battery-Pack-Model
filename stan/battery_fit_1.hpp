
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace battery_fit_1_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 52> locations_array__ = 
{" (found before start of program)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 9, column 4 to column 43)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 10, column 4 to column 41)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 12, column 4 to column 34)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 13, column 4 to column 38)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 15, column 4 to column 52)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 16, column 4 to column 43)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 18, column 4 to column 49)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 20, column 4 to column 34)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 21, column 4 to column 28)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 25, column 4 to column 47)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 36, column 12 to column 65)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 35, column 8 to line 37, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 32, column 12 to column 44)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 31, column 8 to line 33, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 30, column 8 to line 37, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 29, column 4 to line 38, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 28, column 4 to line 38, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 78, column 4 to column 32)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 79, column 4 to column 38)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 92, column 12 to column 143)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 93, column 12 to column 149)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 91, column 8 to line 94, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 86, column 12 to column 39)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 88, column 12 to column 49)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 85, column 8 to line 89, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 84, column 8 to line 94, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 83, column 4 to line 95, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 82, column 4 to line 95, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 45, column 4 to column 34)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 48, column 4 to column 38)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 51, column 4 to column 36)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 53, column 4 to column 37)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 56, column 4 to column 36)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 58, column 4 to column 32)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 61, column 4 to column 47)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 63, column 4 to column 48)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 68, column 8 to column 59)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 69, column 8 to column 67)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 67, column 4 to line 70, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 66, column 4 to line 70, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 71, column 4 to column 93)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 74, column 4 to column 41)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 2, column 4 to column 19)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 3, column 11 to column 12)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 3, column 4 to column 31)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 4, column 11 to column 12)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 4, column 4 to column 28)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 5, column 4 to column 46)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 25, column 10 to column 11)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 78, column 10 to column 11)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_fit_1.stan', line 79, column 10 to column 11)"};




class battery_fit_1_model final : public model_base_crtp<battery_fit_1_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> current_measured__;
  Eigen::Matrix<double, -1, 1> time_measured__;
  double discharge_capacity_measured; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> current_measured{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> time_measured{nullptr, 0};
 
 public:
  ~battery_fit_1_model() { }
  
  inline std::string model_name() const final { return "battery_fit_1_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  battery_fit_1_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "battery_fit_1_model_namespace::battery_fit_1_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 43;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 43;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("current_measured", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization","current_measured",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_measured__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&current_measured) Eigen::Map<Eigen::Matrix<double, -1, 1>>(current_measured__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> current_measured_flat__;
        current_statement__ = 45;
        current_measured_flat__ = context__.vals_r("current_measured");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 45;
          stan::model::assign(current_measured,
            current_measured_flat__[(pos__ - 1)],
            "assigning variable current_measured", stan::model::index_uni(sym1__));
          current_statement__ = 45;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 46;
      stan::math::validate_non_negative_index("time_measured", "N", N);
      current_statement__ = 47;
      context__.validate_dims("data initialization","time_measured","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      time_measured__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&time_measured) Eigen::Map<Eigen::Matrix<double, -1, 1>>(time_measured__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> time_measured_flat__;
        current_statement__ = 47;
        time_measured_flat__ = context__.vals_r("time_measured");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 47;
          stan::model::assign(time_measured,
            time_measured_flat__[(pos__ - 1)],
            "assigning variable time_measured", stan::model::index_uni(sym1__));
          current_statement__ = 47;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 48;
      context__.validate_dims("data initialization",
          "discharge_capacity_measured","double", std::vector<size_t>{});
      discharge_capacity_measured = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 48;
      discharge_capacity_measured = context__.vals_r("discharge_capacity_measured")[
          (1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "discharge_capacity_measured",
                                            discharge_capacity_measured, 0);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("time_step", "N", N);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("estimated_soc", "N", N);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("estimated_discharge", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "battery_fit_1_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ current_prior = DUMMY_VAR__;
      current_statement__ = 1;
      current_prior = in__.template read_constrain_lub<local_scalar_t__, 
                        jacobian__>(-3, -1, lp__);
      local_scalar_t__ current_error = DUMMY_VAR__;
      current_statement__ = 2;
      current_error = in__.template read_constrain_lub<local_scalar_t__, 
                        jacobian__>(0, 1, lp__);
      local_scalar_t__ time_step_prior = DUMMY_VAR__;
      current_statement__ = 3;
      time_step_prior = in__.template read_constrain_lb<local_scalar_t__, 
                          jacobian__>(0, lp__);
      local_scalar_t__ time_error = DUMMY_VAR__;
      current_statement__ = 4;
      time_error = in__.template read_constrain_lub<local_scalar_t__, 
                     jacobian__>(0, 1, lp__);
      local_scalar_t__ discharge_capacity_prior = DUMMY_VAR__;
      current_statement__ = 5;
      discharge_capacity_prior = in__.template read_constrain_lub<
                                   local_scalar_t__, jacobian__>(1, 3, lp__);
      local_scalar_t__ discharge_capacity_error = DUMMY_VAR__;
      current_statement__ = 6;
      discharge_capacity_error = in__.template read_constrain_lb<
                                   local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ initial_soc_prior = DUMMY_VAR__;
      current_statement__ = 7;
      initial_soc_prior = in__.template read_constrain_lub<local_scalar_t__, 
                            jacobian__>(0.5, 1.2, lp__);
      local_scalar_t__ discharge_error = DUMMY_VAR__;
      current_statement__ = 8;
      discharge_error = in__.template read_constrain_lb<local_scalar_t__, 
                          jacobian__>(0, lp__);
      local_scalar_t__ soc_error = DUMMY_VAR__;
      current_statement__ = 9;
      soc_error = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      std::vector<local_scalar_t__> time_step =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 17;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 15;
        if (stan::math::logical_eq(i, 1)) {
          current_statement__ = 13;
          stan::model::assign(time_step,
            stan::model::rvalue(time_measured, "time_measured",
              stan::model::index_uni(i)),
            "assigning variable time_step", stan::model::index_uni(i));
        } else {
          current_statement__ = 11;
          stan::model::assign(time_step,
            (stan::model::rvalue(time_measured, "time_measured",
               stan::model::index_uni(i)) -
              stan::model::rvalue(time_measured, "time_measured",
                stan::model::index_uni((i - 1)))),
            "assigning variable time_step", stan::model::index_uni(i));
        }
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "time_step", time_step,
                                            0);
      current_statement__ = 10;
      stan::math::check_less_or_equal(function__, "time_step", time_step, 40);
      {
        current_statement__ = 29;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(soc_error, 0, 0.0001));
        current_statement__ = 30;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(discharge_error, 0, 0.01));
        current_statement__ = 31;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(current_prior, -2, 0.1));
        current_statement__ = 32;
        lp_accum__.add(
          stan::math::uniform_lpdf<propto__>(current_error, 0, 0.01));
        current_statement__ = 33;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(time_step_prior, 18, 2));
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(time_error, 0, 0.5));
        current_statement__ = 35;
        lp_accum__.add(
          stan::math::uniform_lpdf<propto__>(discharge_capacity_prior, 1.4,
            2));
        current_statement__ = 36;
        lp_accum__.add(
          stan::math::uniform_lpdf<propto__>(discharge_capacity_error, 0,
            0.01));
        current_statement__ = 40;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 37;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(time_step, "time_step",
                stan::model::index_uni(i)), time_step_prior, time_error));
          current_statement__ = 38;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(current_measured, "current_measured",
                stan::model::index_uni(i)), current_prior, current_error));
        }
        current_statement__ = 41;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(discharge_capacity_measured,
            discharge_capacity_prior, discharge_capacity_error));
        current_statement__ = 42;
        lp_accum__.add(
          stan::math::uniform_lpdf<propto__>(initial_soc_prior, 0.99, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "battery_fit_1_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double current_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      current_prior = in__.template read_constrain_lub<local_scalar_t__, 
                        jacobian__>(-3, -1, lp__);
      double current_error = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      current_error = in__.template read_constrain_lub<local_scalar_t__, 
                        jacobian__>(0, 1, lp__);
      double time_step_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      time_step_prior = in__.template read_constrain_lb<local_scalar_t__, 
                          jacobian__>(0, lp__);
      double time_error = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      time_error = in__.template read_constrain_lub<local_scalar_t__, 
                     jacobian__>(0, 1, lp__);
      double discharge_capacity_prior =
         std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      discharge_capacity_prior = in__.template read_constrain_lub<
                                   local_scalar_t__, jacobian__>(1, 3, lp__);
      double discharge_capacity_error =
         std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      discharge_capacity_error = in__.template read_constrain_lb<
                                   local_scalar_t__, jacobian__>(0, lp__);
      double initial_soc_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      initial_soc_prior = in__.template read_constrain_lub<local_scalar_t__, 
                            jacobian__>(0.5, 1.2, lp__);
      double discharge_error = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      discharge_error = in__.template read_constrain_lb<local_scalar_t__, 
                          jacobian__>(0, lp__);
      double soc_error = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      soc_error = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      std::vector<double> time_step =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      out__.write(current_prior);
      out__.write(current_error);
      out__.write(time_step_prior);
      out__.write(time_error);
      out__.write(discharge_capacity_prior);
      out__.write(discharge_capacity_error);
      out__.write(initial_soc_prior);
      out__.write(discharge_error);
      out__.write(soc_error);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 17;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 15;
        if (stan::math::logical_eq(i, 1)) {
          current_statement__ = 13;
          stan::model::assign(time_step,
            stan::model::rvalue(time_measured, "time_measured",
              stan::model::index_uni(i)),
            "assigning variable time_step", stan::model::index_uni(i));
        } else {
          current_statement__ = 11;
          stan::model::assign(time_step,
            (stan::model::rvalue(time_measured, "time_measured",
               stan::model::index_uni(i)) -
              stan::model::rvalue(time_measured, "time_measured",
                stan::model::index_uni((i - 1)))),
            "assigning variable time_step", stan::model::index_uni(i));
        }
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "time_step", time_step,
                                            0);
      current_statement__ = 10;
      stan::math::check_less_or_equal(function__, "time_step", time_step, 40);
      if (emit_transformed_parameters__) {
        out__.write(time_step);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> estimated_soc =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> estimated_discharge =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 26;
        if (stan::math::logical_eq(i, 1)) {
          current_statement__ = 23;
          stan::model::assign(estimated_discharge, 0,
            "assigning variable estimated_discharge", stan::model::index_uni(1));
          current_statement__ = 24;
          stan::model::assign(estimated_soc, initial_soc_prior,
            "assigning variable estimated_soc", stan::model::index_uni(1));
        } else {
          current_statement__ = 20;
          stan::model::assign(estimated_discharge,
            stan::math::normal_rng(
              (stan::model::rvalue(estimated_discharge,
                 "estimated_discharge", stan::model::index_uni((i - 1))) +
                ((stan::math::fabs(
                    stan::model::rvalue(current_measured, "current_measured",
                      stan::model::index_uni(i))) *
                   stan::model::rvalue(time_step, "time_step",
                     stan::model::index_uni(i))) / 3600)), discharge_error,
              base_rng__),
            "assigning variable estimated_discharge", stan::model::index_uni(i));
          current_statement__ = 21;
          stan::model::assign(estimated_soc,
            stan::math::normal_rng(
              (stan::model::rvalue(estimated_soc, "estimated_soc",
                 stan::model::index_uni((i - 1))) +
                ((stan::model::rvalue(current_measured, "current_measured",
                    stan::model::index_uni(i)) *
                   stan::model::rvalue(time_step, "time_step",
                     stan::model::index_uni(i))) /
                  (discharge_capacity_measured * 3600))), soc_error,
              base_rng__),
            "assigning variable estimated_soc", stan::model::index_uni(i));
        }
      }
      out__.write(estimated_soc);
      out__.write(estimated_discharge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ current_prior = DUMMY_VAR__;
      current_prior = in__.read<local_scalar_t__>();
      out__.write_free_lub(-3, -1, current_prior);
      local_scalar_t__ current_error = DUMMY_VAR__;
      current_error = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, current_error);
      local_scalar_t__ time_step_prior = DUMMY_VAR__;
      time_step_prior = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, time_step_prior);
      local_scalar_t__ time_error = DUMMY_VAR__;
      time_error = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, time_error);
      local_scalar_t__ discharge_capacity_prior = DUMMY_VAR__;
      discharge_capacity_prior = in__.read<local_scalar_t__>();
      out__.write_free_lub(1, 3, discharge_capacity_prior);
      local_scalar_t__ discharge_capacity_error = DUMMY_VAR__;
      discharge_capacity_error = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, discharge_capacity_error);
      local_scalar_t__ initial_soc_prior = DUMMY_VAR__;
      initial_soc_prior = in__.read<local_scalar_t__>();
      out__.write_free_lub(0.5, 1.2, initial_soc_prior);
      local_scalar_t__ discharge_error = DUMMY_VAR__;
      discharge_error = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, discharge_error);
      local_scalar_t__ soc_error = DUMMY_VAR__;
      soc_error = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, soc_error);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"current_prior", "current_error",
      "time_step_prior", "time_error", "discharge_capacity_prior",
      "discharge_capacity_error", "initial_soc_prior", "discharge_error",
      "soc_error", "time_step", "estimated_soc", "estimated_discharge"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "current_prior");
    param_names__.emplace_back(std::string() + "current_error");
    param_names__.emplace_back(std::string() + "time_step_prior");
    param_names__.emplace_back(std::string() + "time_error");
    param_names__.emplace_back(std::string() + "discharge_capacity_prior");
    param_names__.emplace_back(std::string() + "discharge_capacity_error");
    param_names__.emplace_back(std::string() + "initial_soc_prior");
    param_names__.emplace_back(std::string() + "discharge_error");
    param_names__.emplace_back(std::string() + "soc_error");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "time_step" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "estimated_soc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "estimated_discharge" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "current_prior");
    param_names__.emplace_back(std::string() + "current_error");
    param_names__.emplace_back(std::string() + "time_step_prior");
    param_names__.emplace_back(std::string() + "time_error");
    param_names__.emplace_back(std::string() + "discharge_capacity_prior");
    param_names__.emplace_back(std::string() + "discharge_capacity_error");
    param_names__.emplace_back(std::string() + "initial_soc_prior");
    param_names__.emplace_back(std::string() + "discharge_error");
    param_names__.emplace_back(std::string() + "soc_error");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "time_step" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "estimated_soc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "estimated_discharge" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"current_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"current_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"time_step_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"time_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"discharge_capacity_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"discharge_capacity_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"initial_soc_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"discharge_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"soc_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"time_step\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"estimated_soc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"estimated_discharge\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"current_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"current_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"time_step_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"time_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"discharge_capacity_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"discharge_capacity_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"initial_soc_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"discharge_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"soc_error\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"time_step\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"estimated_soc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"estimated_discharge\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = N;
      const size_t num_gen_quantities = 
  (N + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = N;
      const size_t num_gen_quantities = 
  (N + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 9> names__{"current_prior",
      "current_error", "time_step_prior", "time_error",
      "discharge_capacity_prior", "discharge_capacity_error",
      "initial_soc_prior", "discharge_error", "soc_error"};
      const std::array<Eigen::Index, 9> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = battery_fit_1_model_namespace::battery_fit_1_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return battery_fit_1_model_namespace::profiles__;
}

#endif


