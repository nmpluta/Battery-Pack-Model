
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace spline_centered_alpha_ppc_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 24> locations_array__ = 
{" (found before start of program)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 10, column 4 to column 19)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 12, column 8 to column 39)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 11, column 19 to line 13, column 5)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 11, column 4 to line 13, column 5)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 14, column 4 to column 38)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 15, column 4 to column 17)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 17, column 8 to column 28)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 16, column 19 to line 18, column 5)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 16, column 4 to line 18, column 5)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 19, column 4 to column 16)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 21, column 8 to column 40)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 20, column 19 to line 22, column 5)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 20, column 4 to line 22, column 5)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 2, column 4 to column 19)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 3, column 4 to column 19)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 4, column 4 to column 19)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 5, column 11 to column 12)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 5, column 14 to column 15)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 5, column 4 to column 19)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 6, column 4 to column 24)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 10, column 11 to column 12)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 15, column 11 to column 12)",
 " (in '/usr/battery-pack-model-and-data/ppc/spline_centered_alpha_ppc.stan', line 19, column 11 to column 12)"};




class spline_centered_alpha_ppc_model final : public model_base_crtp<spline_centered_alpha_ppc_model> {

 private:
  int N;
  int K;
  int L;
  Eigen::Matrix<double, -1, -1> x__;
  double alpha; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> x{nullptr, 0, 0};
 
 public:
  ~spline_centered_alpha_ppc_model() { }
  
  inline std::string model_name() const final { return "spline_centered_alpha_ppc_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  spline_centered_alpha_ppc_model(stan::io::var_context& context__,
                                  unsigned int random_seed__ = 0,
                                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "spline_centered_alpha_ppc_model_namespace::spline_centered_alpha_ppc_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 14;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 15;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 15;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 16;
      context__.validate_dims("data initialization","L","int",
           std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      
      
      current_statement__ = 16;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "L", L, 0);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("x", "K", K);
      current_statement__ = 19;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K)});
      x__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, -1>>(x__.data(), N, K);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 19;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 19;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 19;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 20;
      context__.validate_dims("data initialization","alpha","double",
           std::vector<size_t>{});
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 20;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("mu", "L", L);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("y", "L", L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "spline_centered_alpha_ppc_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "spline_centered_alpha_ppc_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> beta =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 2;
        stan::model::assign(beta,
          stan::math::normal_rng(0, alpha, base_rng__),
          "assigning variable beta", stan::model::index_uni(k));
      }
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma = stan::math::exponential_rng(0.1, base_rng__);
      Eigen::Matrix<double, -1, 1> mu =
         Eigen::Matrix<double, -1, 1>::Constant(L,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 7;
        stan::model::assign(mu,
          stan::math::multiply(
            stan::model::rvalue(x, "x", stan::model::index_uni(l)), beta),
          "assigning variable mu", stan::model::index_uni(l));
      }
      Eigen::Matrix<double, -1, 1> y =
         Eigen::Matrix<double, -1, 1>::Constant(L,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 11;
        stan::model::assign(y,
          stan::math::normal_rng(
            stan::model::rvalue(mu, "mu", stan::model::index_uni(l)), sigma,
            base_rng__), "assigning variable y", stan::model::index_uni(l));
      }
      out__.write(beta);
      out__.write(sigma);
      out__.write(mu);
      out__.write(y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"beta", "sigma", "mu", "y"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(K)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((K + 1) + L) + L);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((K + 1) + L) + L);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = spline_centered_alpha_ppc_model_namespace::spline_centered_alpha_ppc_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return spline_centered_alpha_ppc_model_namespace::profiles__;
}

#endif


