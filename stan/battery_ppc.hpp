
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace battery_ppc_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 45> locations_array__ = 
{" (found before start of program)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 11, column 4 to column 33)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 12, column 4 to column 37)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 13, column 4 to column 32)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 14, column 4 to column 26)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 15, column 4 to column 32)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 16, column 4 to column 38)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 20, column 4 to column 68)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 23, column 4 to column 72)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 34, column 12 to column 56)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 33, column 8 to line 35, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 30, column 12 to column 39)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 29, column 8 to line 31, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 28, column 8 to line 35, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 27, column 4 to line 36, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 26, column 4 to line 36, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 47, column 12 to column 47)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 46, column 8 to line 48, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 43, column 12 to column 35)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 42, column 8 to line 44, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 41, column 8 to line 48, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 40, column 4 to line 49, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 39, column 4 to line 49, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 62, column 12 to column 105)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 63, column 12 to column 118)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 61, column 8 to line 64, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 56, column 12 to column 39)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 58, column 12 to column 43)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 55, column 8 to line 59, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 54, column 8 to line 64, column 9)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 53, column 4 to line 65, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 52, column 4 to line 65, column 5)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 2, column 4 to column 19)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 3, column 11 to column 12)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 3, column 4 to column 31)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 4, column 11 to column 12)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 4, column 4 to column 28)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 5, column 4 to column 33)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 6, column 4 to column 39)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 7, column 4 to column 39)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 12, column 10 to column 11)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 13, column 10 to column 11)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 14, column 10 to column 11)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 15, column 10 to column 11)",
 " (in '/usr/battery-pack-model-and-data/stan/battery_ppc.stan', line 16, column 10 to column 11)"};




class battery_ppc_model final : public model_base_crtp<battery_ppc_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> current_measured__;
  Eigen::Matrix<double, -1, 1> time_measured__;
  double rated_capacity;
  double initial_soc;
  double initial_soh; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> current_measured{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> time_measured{nullptr, 0};
 
 public:
  ~battery_ppc_model() { }
  
  inline std::string model_name() const final { return "battery_ppc_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  battery_ppc_model(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "battery_ppc_model_namespace::battery_ppc_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 32;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 32;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("current_measured", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","current_measured",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_measured__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&current_measured) Eigen::Map<Eigen::Matrix<double, -1, 1>>(current_measured__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> current_measured_flat__;
        current_statement__ = 34;
        current_measured_flat__ = context__.vals_r("current_measured");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 34;
          stan::model::assign(current_measured,
            current_measured_flat__[(pos__ - 1)],
            "assigning variable current_measured", stan::model::index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      stan::math::validate_non_negative_index("time_measured", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization","time_measured","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      time_measured__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&time_measured) Eigen::Map<Eigen::Matrix<double, -1, 1>>(time_measured__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> time_measured_flat__;
        current_statement__ = 36;
        time_measured_flat__ = context__.vals_r("time_measured");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 36;
          stan::model::assign(time_measured,
            time_measured_flat__[(pos__ - 1)],
            "assigning variable time_measured", stan::model::index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      context__.validate_dims("data initialization","rated_capacity",
          "double", std::vector<size_t>{});
      rated_capacity = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 37;
      rated_capacity = context__.vals_r("rated_capacity")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "rated_capacity",
                                            rated_capacity, 0);
      current_statement__ = 38;
      context__.validate_dims("data initialization","initial_soc","double",
           std::vector<size_t>{});
      initial_soc = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 38;
      initial_soc = context__.vals_r("initial_soc")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "initial_soc",
                                            initial_soc, 0);
      current_statement__ = 38;
      stan::math::check_less_or_equal(function__, "initial_soc", initial_soc,
                                         1);
      current_statement__ = 39;
      context__.validate_dims("data initialization","initial_soh","double",
           std::vector<size_t>{});
      initial_soh = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 39;
      initial_soh = context__.vals_r("initial_soh")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "initial_soh",
                                            initial_soh, 0);
      current_statement__ = 39;
      stan::math::check_less_or_equal(function__, "initial_soh", initial_soh,
                                         1);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("time_step", "N", N);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("time", "N", N);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("current", "N", N);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("estimated_soc", "N", N);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("estimated_discharge", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "battery_ppc_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "battery_ppc_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double prior_capacity = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> time_step =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> time =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> current =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> estimated_soc =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> estimated_discharge =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      prior_capacity = stan::math::normal_rng(rated_capacity,
                         (0.1 * rated_capacity), base_rng__);
      current_statement__ = 8;
      stan::model::assign(current,
        stan::math::normal_rng(current_measured,
          stan::math::fabs(stan::math::multiply(0.01, current_measured)),
          base_rng__), "assigning variable current");
      current_statement__ = 15;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 13;
        if (stan::math::logical_eq(i, 1)) {
          current_statement__ = 11;
          stan::model::assign(time,
            stan::model::rvalue(time_measured, "time_measured",
              stan::model::index_uni(i)),
            "assigning variable time", stan::model::index_uni(i));
        } else {
          current_statement__ = 9;
          stan::model::assign(time,
            stan::math::normal_rng(
              stan::model::rvalue(time_measured, "time_measured",
                stan::model::index_uni(i)), 0.5, base_rng__),
            "assigning variable time", stan::model::index_uni(i));
        }
      }
      current_statement__ = 22;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 20;
        if (stan::math::logical_eq(i, 1)) {
          current_statement__ = 18;
          stan::model::assign(time_step,
            stan::model::rvalue(time, "time", stan::model::index_uni(i)),
            "assigning variable time_step", stan::model::index_uni(i));
        } else {
          current_statement__ = 16;
          stan::model::assign(time_step,
            (stan::model::rvalue(time, "time", stan::model::index_uni(i)) -
              stan::model::rvalue(time, "time",
                stan::model::index_uni((i - 1)))),
            "assigning variable time_step", stan::model::index_uni(i));
        }
      }
      current_statement__ = 31;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 29;
        if (stan::math::logical_eq(i, 1)) {
          current_statement__ = 26;
          stan::model::assign(estimated_discharge, 0,
            "assigning variable estimated_discharge", stan::model::index_uni(1));
          current_statement__ = 27;
          stan::model::assign(estimated_soc, initial_soc,
            "assigning variable estimated_soc", stan::model::index_uni(1));
        } else {
          current_statement__ = 23;
          stan::model::assign(estimated_discharge,
            (stan::model::rvalue(estimated_discharge, "estimated_discharge",
               stan::model::index_uni((i - 1))) +
              ((stan::math::fabs(
                  stan::model::rvalue(current, "current",
                    stan::model::index_uni(i))) *
                 stan::model::rvalue(time_step, "time_step",
                   stan::model::index_uni(i))) / 3600)),
            "assigning variable estimated_discharge", stan::model::index_uni(i));
          current_statement__ = 24;
          stan::model::assign(estimated_soc,
            (stan::model::rvalue(estimated_soc, "estimated_soc",
               stan::model::index_uni((i - 1))) +
              ((stan::model::rvalue(current, "current",
                  stan::model::index_uni(i)) *
                 stan::model::rvalue(time_step, "time_step",
                   stan::model::index_uni(i))) /
                ((prior_capacity * 3600) * initial_soh))),
            "assigning variable estimated_soc", stan::model::index_uni(i));
        }
      }
      current_statement__ = 1;
      stan::math::check_greater_or_equal(function__, "prior_capacity",
                                            prior_capacity, 0);
      current_statement__ = 2;
      stan::math::check_greater_or_equal(function__, "time_step", time_step,
                                            0);
      current_statement__ = 3;
      stan::math::check_greater_or_equal(function__, "time", time, 0);
      out__.write(prior_capacity);
      out__.write(time_step);
      out__.write(time);
      out__.write(current);
      out__.write(estimated_soc);
      out__.write(estimated_discharge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"prior_capacity", "time_step", "time",
      "current", "estimated_soc", "estimated_discharge"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "prior_capacity");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "time_step" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "time" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "current" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "estimated_soc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "estimated_discharge" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "prior_capacity");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "time_step" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "time" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "current" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "estimated_soc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "estimated_discharge" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior_capacity\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"time_step\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"time\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"current\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"estimated_soc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"estimated_discharge\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior_capacity\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"time_step\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"time\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"current\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"estimated_soc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"estimated_discharge\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((((1 + N) + N) + N) + N) + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((((1 + N) + N) + N) + N) + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = battery_ppc_model_namespace::battery_ppc_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return battery_ppc_model_namespace::profiles__;
}

#endif


